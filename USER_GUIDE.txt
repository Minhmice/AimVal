AimVal - Hướng dẫn sử dụng và giải thích mã nguồn

1) Giới thiệu nhanh
- AimVal là ứng dụng hỗ trợ ngắm và bắn dựa trên màu sắc mục tiêu (color-based) qua luồng hình ảnh (ưu tiên UDP MJPEG). Ứng dụng có GUI (ttkbootstrap) cho phép bật/tắt Aim Assist, Triggerbot, chỉnh thông số xử lý ảnh và tham số ngắm.
- Hệ thống có thể chạy ở 2 chế độ:
  - Có kết nối phần cứng Makcu: gửi lệnh chuột thật (nhấn/trả, di chuyển).
  - Mô phỏng (không có Makcu): ứng dụng vẫn chạy, xử lý ảnh/hiển thị nhưng không gửi lệnh chuột (an toàn để thử nghiệm).

2) Cài đặt
- Yêu cầu Windows, Python 3.13 (đã kèm venv trong dự án).
- Cài phụ thuộc (đã làm sẵn trong venv, nếu cần cài lại):
  - opencv-python, numpy, pyserial, ttkbootstrap, dxcam, screeninfo, scipy, makcu
- Nếu sử dụng Makcu thật, cắm thiết bị và đảm bảo driver/COM port hoạt động.

3) Chạy ứng dụng
- Cách 1: chạy GUI chính
  - PowerShell: venv\Scripts\python.exe aimval_tracker_2\main.py
- Cách 2: gửi/nhận khung hình UDP (đi kèm viewer/sender nếu cần)
  - udp_sender.py, udp_viewer.py/udp_viewer_2.py (tùy nhu cầu kiểm thử).

4) Giao diện (GUI)
- Nút Start/Stop: bật/tắt vòng lặp xử lý khung hình.
- Show Debug: hiển thị cửa sổ OpenCV gồm mask và ảnh có overlay (hỗ trợ chẩn đoán).
- View Screen: hiển thị khung hình đầu vào (đặc biệt hữu ích khi dùng UDP).
- Tabs:
  - Main: bật/tắt Aim Assist/Triggerbot, FPS Limit, FOV (vùng lấy ảnh), Save/Load cấu hình JSON.
  - Aiming: chỉnh tốc độ khi tiếp cận mục tiêu, khi bám mục tiêu, độ nhạy chuột (ingame), jitter, giảm trục dọc, Headshot mode, v.v.
  - Detection: ngưỡng kích thước vật thể, thông số giãn/nở (morphology), chọn profile màu địch (HSV) và tinh chỉnh trực tiếp.
  - Advanced: thời lượng bắn (SHOT_DURATION), thời gian hồi bắn (SHOT_COOLDOWN), độ trễ nhả cò (TRIGGERBOT_DELAY_MS).

5) Cấu hình (aimval_tracker_2/config.py)
- Lớp SharedConfig quản lý cài đặt thread-safe, load/save JSON, và cung cấp helper như get_hsv_lower/upper, kernel dilate/erode.
- Một số khóa quan trọng:
  - FRAME_SOURCE: "udp" (mặc định). Nếu chuyển sang capture màn hình (dxcam), tham khảo code ở core.py (nhánh else).
  - DEBUG_WINDOW_VISIBLE, VIEW_SCREEN_VISIBLE, FPS_LIMIT
  - AIM_*: các tham số ngắm; TRIGGERBOT_*: tham số bắn; DEADZONE; các thông số morphology; màu HSV.
  - UDP_HOST/UDP_PORT/UDP_RCVBUF_MB/UDP_TURBOJPEG: nguồn ảnh qua UDP.
  - FOV_RESOLUTION: độ phân giải FOV (ảnh hưởng vùng capture khi dùng dxcam).

6) Luồng xử lý chính (aimval_tracker_2/core.py)
- TriggerbotCore.setup():
  1) Tạo MakcuController: nếu không kết nối được, hệ thống chuyển sang chế độ mô phỏng và tiếp tục chạy.
  2) Khởi tạo Detector, Aimer.
  3) Nguồn khung hình: mặc định ép dùng UDP (config FRAME_SOURCE=udp).
     - Nếu dùng UDP: tạo UdpFrameSource và start().
     - Nếu dùng dxcam: xác định vùng lấy ảnh theo FOV_RESOLUTION, tạo camera dxcam và start().
- TriggerbotCore.run_one_frame():
  1) Lấy frame.
  2) Detection: chuyển BGR->HSV, threshold theo HSV, morphology, tìm contour, lọc diện tích và trả về danh sách mục tiêu.
  3) Trigger check (verify_on_target): quét 2 dải ngang trên/dưới tâm FOV; nếu có màu ở cả hai dải thì coi là “on target”.
  4) Triggerbot: nếu on target đủ lâu và qua cooldown, gọi shoot_burst().
  5) Aim Assist: chọn mục tiêu gần tâm nhất trong phạm vi, sau trễ, gọi Aimer.start_aim().
  6) Hiển thị: nếu bật debug/view thì show lên OpenCV windows.
  7) Giới hạn FPS bằng sleep nếu cần.
- TriggerbotCore.shoot_burst(): chạy thread ngắn gọi press_left, ngủ SHOT_DURATION, rồi release_left.
- cleanup(): dừng Aimer, camera, đóng cửa sổ, ngắt Makcu.

7) Điều khiển chuột (aimval_tracker_2/hardware.py)
- MakcuController: bao bọc thư viện makcu, cung cấp press_left(), release_left(), move(dx, dy).
- Đã bổ sung xử lý lỗi an toàn: bắt MakcuConnectionError, MakcuTimeoutError, SerialTimeoutException… => log cảnh báo và chuyển sang trạng thái is_connected=False để không gọi tiếp lệnh đến phần cứng.
- Khi ở chế độ mô phỏng (không kết nối), các hàm sẽ trả về ngay (no-op), giúp demo/kiểm thử không cần thiết bị.

8) Thuật toán phát hiện (aimval_tracker_2/detection.py)
- Detector.run(frame):
  - BGR->HSV, inRange(lower, upper) để tạo mask.
  - Dilate rồi erode (closing) để giảm nhiễu và lấp lỗ nhỏ.
  - findContours (external), lọc theo MIN_CONTOUR_AREA.
  - Với mỗi contour hợp lệ, tính moments -> center và bounding rect.
- verify_on_target(mask, cx, cy, h, w): kiểm tra có pixel màu ở dải trên và dải dưới tâm (sandwich).
- visualize_detection(img, targets): vẽ rect và tâm mục tiêu lên ảnh debug.

9) Aiming (aimval_tracker_2/aiming.py)
- Aimer.start_aim(): tạo thread ngắn _aim_worker.
- _aim_worker:
  - Tính dx, dy từ chênh lệch tâm FOV -> tâm mục tiêu; áp dụng hệ số speed, damping, jitter, sensitivity.
  - Chuyển đổi sang đơn vị di chuyển của thiết bị (chia cho sensitivity); nếu vượt deadzone nhỏ thì gọi mouse.move().
  - Thread tự kết thúc rất nhanh để không tranh chấp với vòng lặp chính.

10) Logging (aimval_tracker_2/logger.py)
- setup_logging(): log xoay vòng (~5MB x 3) tại thư mục %USERPROFILE%/DevelopmentFiles/valorant_colorbot_log.txt và mirror ra console.
- GUI và core log các sự kiện quan trọng: khởi động, UDP stats, cảnh báo, lỗi…

11) Mẫu mã quan trọng (trích) và giải thích

11.1) Khởi tạo và chạy GUI
```python
from logger import setup_logging
from config import SharedConfig
from tracker import ControlPanelGUI

if __name__ == "__main__":
    setup_logging()
    cfg = SharedConfig()
    app = ControlPanelGUI(cfg)
    app.mainloop()
```
Giải thích: cấu hình logger, tạo cấu hình chia sẻ, tạo cửa sổ điều khiển, vào vòng lặp GUI.

11.2) Vòng lặp khung hình tối giản
```python
core = TriggerbotCore(cfg)
if core.setup():
    for _ in range(1000):
        core.run_one_frame()
    core.cleanup()
```
Giải thích: thiết lập core, chạy 1000 bước xử lý, sau đó giải phóng tài nguyên.

11.3) Gọi bắn trong code (ví dụ)
```python
# Bắn 100ms nếu hội đủ điều kiện
core.shoot_burst(duration=0.1)
```
Giải thích: tạo thread ngắn nhấn/trả chuột trái qua MakcuController (hoặc bỏ qua nếu mô phỏng).

11.4) Thay đổi HSV qua code
```python
cfg.set("LOWER_YELLOW_H", 30)
cfg.set("LOWER_YELLOW_S", 113)
cfg.set("LOWER_YELLOW_V", 131)
cfg.set("UPPER_YELLOW_H", 32)
cfg.set("UPPER_YELLOW_S", 255)
cfg.set("UPPER_YELLOW_V", 255)
```
Giải thích: áp dụng nhanh profile màu địch; có thể lưu lại bằng GUI.

12) Lỗi thường gặp và cách xử lý
- Thiếu gói Python (ModuleNotFoundError): cài bằng pip vào venv (đã xử lý giúp bạn: ttkbootstrap, dxcam, screeninfo, scipy…).
- Lỗi Makcu Timeout/SerialTimeout: thiết bị không sẵn sàng hoặc COM bị treo. Hệ thống nay sẽ tự chuyển sang mô phỏng (không gửi lệnh). Cắm lại thiết bị rồi khởi động lại nếu muốn điều khiển chuột thật.
- Không có khung hình UDP: kiểm tra sender, địa chỉ/port, tường lửa. GUI log có thống kê UDP (pkts/frames/rt/avg/lastPkt/lastFrm).
- Cửa sổ debug không hiển thị: bật “Show Debug”, đảm bảo driver OpenCV HighGUI đầy đủ.

13) Tùy biến nâng cao
- Chuyển sang chụp màn hình (dxcam): đổi FRAME_SOURCE và sử dụng nhánh else trong core.py (đang bị ép về UDP để ổn định). Cân nhắc hiệu năng.
- Bật Optical Flow Tracking (xem tracker.py) để duy trì mục tiêu khi detection tạm thời mất dấu (cần bổ sung khóa cấu hình OPTICAL_FLOW_ENABLED, TARGET_MEMORY_DURATION nếu dùng).

14) Gợi ý hiệu năng
- Giảm FOV_RESOLUTION nếu PC yếu hoặc tăng FPS_LIMIT hợp lý (ví dụ 180-240).
- Điều chỉnh morphology (kernel/iterations) để cân bằng nhiễu và độ mượt phát hiện.
- Aim speeds thấp hơn cho độ mịn, sensitivity phù hợp với in-game.

15) Ghi chú pháp lý/đạo đức
- Chỉ sử dụng trong môi trường thử nghiệm/học tập. Tuân thủ điều khoản trò chơi và pháp luật sở tại.

Kết thúc
- Nếu bạn cần bản .docx, có thể mở USER_GUIDE.txt bằng Word rồi “Save As” DOCX.

